#pragma kernel Step
#pragma kernel Input


#define NUM_THREAD_X 32
#define NUM_THREAD_Y 32
#define NUM_THREAD_Z 1


#include "Data.cginc"


RWStructuredBuffer<Data> _WriteBuf;
StructuredBuffer<Data> _ReadBuf;

inline bool GetAlive(int2 xy)
{
    return (any(xy < 0) || (_Width <= xy.x) || (_Height <= xy.y)) ? false : _ReadBuf[xyToIdx(xy)].alive;
}

////////////////////////////////////////////////////////////////////////////////
// Step
////////////////////////////////////////////////////////////////////////////////
[numthreads(NUM_THREAD_X,NUM_THREAD_Y,NUM_THREAD_Z)]
void Step (uint3 id : SV_DispatchThreadID)
{
	int2 pos = id.xy;
	if ( (pos.x < _Width) && (pos.y < _Height))
	{
		bool alive0  = GetAlive(id.xy + int2(-1,-1));
		bool alive1  = GetAlive(id.xy + int2( 0,-1));
		bool alive2  = GetAlive(id.xy + int2( 1,-1));
		bool alive3  = GetAlive(id.xy + int2(-1, 0));
		bool center = GetAlive(id.xy + int2( 0, 0));
		bool alive4  = GetAlive(id.xy + int2( 1, 0));
		bool alive5  = GetAlive(id.xy + int2(-1, 1));
		bool alive6  = GetAlive(id.xy + int2( 0, 1));
		bool alive7  = GetAlive(id.xy + int2( 1, 1));

        int count = alive0
            + alive1 
            + alive2 
            + alive3 
            + alive4 
            + alive5 
            + alive6 
            + alive7;

       _WriteBuf[xyToIdx(pos)].alive = (center && (count == 2 || count == 3)) || (!center && count == 3);
	}
}

////////////////////////////////////////////////////////////////////////////////
// Input
////////////////////////////////////////////////////////////////////////////////
float2 _InputPos;
float _InputRadius;

[numthreads(NUM_THREAD_X,NUM_THREAD_Y,NUM_THREAD_Z)]
void Input (uint3 id : SV_DispatchThreadID)
{
	int2 pos = id.xy;
	if ( (pos.x < _Width) && (pos.y < _Height))
	{
		if ( distance(_InputPos, pos) < _InputRadius) 
		{
			_WriteBuf[xyToIdx(pos)].alive = true;
		}
	}
}
